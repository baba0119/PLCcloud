// ===========================================================
// PLCcloud - processing - ladderdebug
// -----------------------------------------------------------
// ラダープログラムの解析/実行
// 仮想的に実行/解析をするパッケージ
// ===========================================================

//
// ラダープログラムの構造化データについて
//
/*
==============================================================
・ラダープログラムの構造化データ
　------------------------------------------------------------

****************
　JSONでの構造体
****************
[
	{
		inputLadder : [ // ラダー出力一つと対応した入力 ],
		outputLadder : { ラダー出力構造体 }
	},
	{
		// 入力部に関しては map[string]interface{} でよい
		[ {ラダー入力構造体}, {ラダー入力構造体}, ....],

		// 出力部はmap[string]interface{}からデータを取り出し
		// て、定義済み構造体を使う
		{ ラダー出力構造体 }
	},
	　　　　　　　・
	　　　　　　　・
	　　　　　　　・
]

　ここから

　・出力スライス群
　・入力スライス

　それぞれに値を入れていく

==============================================================
*/

//
// 入力部スライスについて
//
/*
==============================================================
・ラダープログラムの入力部スライス
　------------------------------------------------------------

　・入力ラダースライス
　・出力情報

　の二つを持つようになる。

　入力ラダースライスは、
　map[string]interface{}で解析した後
　型アサーションを用いて自分の用意した方に変換し、
　スライスに入れる。

　出力情報は、
　ノードnameを出力キーにあて、種類に関しては同じ要素内の
　出力部を見て判断。

　両方合わせてみることで、より厳格にチェックが可能となる。


　分岐端から分岐端までを一つのブロックとする

　分岐端
　- 分岐始端/終端をひっくるめたもの

　最大ブロックに関しては
　- 行ごとにAND演算をする
　- 行のAND演算の結果をOR演算する
　- すべての行にOR演算をしたらブロック単位の演算は終了

　最大ブロック同士の演算はAND演算

==============================================================
*/

//
// 出力部について
//
/*
==============================================================
・ラダープログラムの出力部
　------------------------------------------------------------

　出力に関しては

　・普通仮想出力
　・GPIO出力
　・タイマー出力
　・カウンタ出力

　がある。それぞれデータの構造も変わってくる。

　出力の状態についてもここで持つ。

　このパッケージで
　・出力ノードスライス群
　・出力参照スライスの管理も行う。

==============================================================
*/

package ladderdebug